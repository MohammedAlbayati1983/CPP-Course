/*
* Problem: write a small game program for stone-paper-scissor.
* ask for how many rounds the game will be from 1 to 10?
* start each round player vs computer
* show the result with each round
* if computer wins the round ring a bill and screed red
* if player won the round green screen
* after all rounds show game over the print game results then ask the user if s/he want
* to play again?
*/

#include <iostream>
using namespace std;

enum enGameChoice { Stone = 1, Paper = 2, Scissor = 3 };
enum enWinner { Player = 1, Computer = 2, Draw = 3 };
struct stRoundInfo {
	short roundNumber;
	enGameChoice playerChoice;
	enGameChoice computerChoice;
	enWinner winner;
	string winnerName;
};
struct stGameResults {
	short numberOFRounds;
	short playerWinTimes;
	short computerWinTimes;
	short drawTimes;
	enWinner winnerGame;
	string winnerName;
};
short randomNumber(short from, short to) {
	short randomNum = rand() % (to - from + 1) + from;
	return randomNum;
}
string winnerName(enWinner winner) {
	string arrWinnerName[3] = { "Player","Computer","Draw" };
	return arrWinnerName[winner - 1];
}
enWinner whoWonTheRound(stRoundInfo roundInfo) {
	if (roundInfo.playerChoice == roundInfo.computerChoice)
		return Draw;
	switch (roundInfo.playerChoice)
	{
	case Stone:
		if (roundInfo.computerChoice == Paper)
			return Computer;
		break;
	case Paper:
		if (roundInfo.computerChoice == Scissor)
			return Computer;
		break;
	case Scissor:
		if (roundInfo.computerChoice == Stone)
			return Computer;
		break;
	}
	//if you reach here then Player is the winner.
	return Player;
}
string choiceName(enGameChoice choice) {
	string arrGameChoice[3] = { "Stone","Paper","Scissor" };
	return arrGameChoice[choice - 1];
}
void setWinnerScreenColor(enWinner winner) {
	switch (winner)
	{
	case Player:
		system("color 2F"); //turn screen to Green
		break;
	case Computer:
		system("color 4F"); //turn screen to Red
		cout << "\a";
		break;
	default:
		system("color 6F"); //turn screen to Yellow
	}
}
void printRoundResult(stRoundInfo roundInfo) {
	cout << "\n ---------- Round[" << roundInfo.roundNumber << "] ----------";
	cout << "\n Player Choice  : " << choiceName(roundInfo.playerChoice);
	cout << "\n Computer Choice: " << choiceName(roundInfo.computerChoice);
	cout << "\n Round Winner   : [" << roundInfo.winnerName << ']';
	cout << "\n ------------------------------\n";
	setWinnerScreenColor(roundInfo.winner);
}
enWinner whoWonTheGame(short playerWinTimes, short computerWinTimes) {
	if (playerWinTimes > computerWinTimes)
		return Player;
	else if (computerWinTimes > playerWinTimes)
		return Computer;
	else
		return Draw;
}
stGameResults fillGameResults(short gameRounds, short playerWinTimes, short computerWinTimes, short drawTimes) {
	stGameResults gameResults;
	gameResults.numberOFRounds = gameRounds;
	gameResults.playerWinTimes = playerWinTimes;
	gameResults.computerWinTimes = computerWinTimes;
	gameResults.drawTimes = drawTimes;
	gameResults.winnerGame = whoWonTheGame(playerWinTimes, computerWinTimes);
	gameResults.winnerName = winnerName(gameResults.winnerGame);
	return gameResults;
}
enGameChoice readPlayerChoice() {
	short choice;
	do
	{
		cout << "\n Your Choice: [1]:Stone, [2]:Paper, [3]:Scissors: ";
		cin >> choice;
	} while (choice < 1 || choice > 3);
	return (enGameChoice)choice;
}
enGameChoice getComputerChoice() {
	return (enGameChoice)randomNumber(1, 3);
}
stGameResults playGame(short howManyRounds) {
	stRoundInfo roundInfo;
	short playerWinTimes = 0, computerWinTimes = 0, drawTimes = 0;
	for (short gameRound = 1; gameRound <= howManyRounds; gameRound++) {
		cout << "\n Round [" << gameRound << "] begins:\n";
		roundInfo.roundNumber = gameRound;
		roundInfo.playerChoice = readPlayerChoice();
		roundInfo.computerChoice = getComputerChoice();
		roundInfo.winner = whoWonTheRound(roundInfo);
		roundInfo.winnerName = winnerName(roundInfo.winner);
		//Increase win/Draw counters
		if (roundInfo.winner == Player)
			playerWinTimes++;
		else if (roundInfo.winner == Computer)
			computerWinTimes++;
		else
			drawTimes++;
		printRoundResult(roundInfo);
	}
	return fillGameResults(howManyRounds, playerWinTimes, computerWinTimes, drawTimes);
}
string tabs(short numberOfTabs) {
	string t;
	for (short i = 0; i < numberOfTabs; i++) {
		t += "\t";
	}
	return t;
}
void printGameOverHeader() {
	cout << endl << tabs(2) << "-----------------------------------------";
	cout << endl << tabs(2) << "     + + +  G a m e  O v e r + + +       ";
	cout << endl << tabs(2) << "-----------------------------------------";
}
void printFinalGameResult(stGameResults gameResults) {
	cout << endl << tabs(2) << "------------- [Game Results] ------------";
	cout << endl << tabs(2) << "Game Rounds       : " << gameResults.numberOFRounds;
	cout << endl << tabs(2) << "Player won times  : " << gameResults.playerWinTimes;
	cout << endl << tabs(2) << "Computer won times: " << gameResults.computerWinTimes;
	cout << endl << tabs(2) << "Draw times        : " << gameResults.drawTimes;
	cout << endl << tabs(2) << "Final Winner      : " << gameResults.winnerName;
	cout << endl << tabs(2) << "------------------------------------------";
	setWinnerScreenColor(gameResults.winnerGame);
}
short readHowManyRound() {
	short gameRounds;
	do
	{
		cout << "\nHow Many Rounds 1 to 10: ";
		cin >> gameRounds;
	} while (gameRounds < 1 || gameRounds>10);
	return gameRounds;
}
void resetScreen() {
	system("cls");
	system("color 0F");
}
void startGame() {
	char playAgain;
	do
	{
		resetScreen();
		stGameResults gameResults = playGame(readHowManyRound());
		printGameOverHeader();
		printFinalGameResult(gameResults);
		cout << endl << tabs(3) << "Do you want to play again? Y/N: ";
		cin >> playAgain;
	} while (playAgain == 'Y' || playAgain == 'y');
}

int main()
{
	//Seeds the random number generator in C++, called only once
	srand((unsigned)time(NULL));
	startGame();
	return 0;
}